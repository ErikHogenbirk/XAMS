;;
;   Configuration for Nikhef lab H037
;   Created 4 October 2016
;;

[pax]
plugin_group_names = ['input', 'processing','output']

look_for_config_in_runs_db = False

logging_level = 'INFO'
print_timing_report = True

plugin_paths = ['/home/xams/xams']

input = 'MongoXAMS.MongoDBInputTriggered'
decoder_plugin = 'MongoXAMS.MongoDBInputTriggeredEncoder'

processing = ['CheckPulses.SortPulses',
              #'CheckPulses.ConcatenateAdjacentPulses',
              'CheckPulses.CheckBounds',

              'HitFinder.FindHits',
              'SumWaveform.SumWaveform',

              'BuildPeaks.GapSizeClustering',

              'BasicProperties.BasicProperties',
              'BasicProperties.SumWaveformProperties',
              'BasicProperties.CountCoincidentNoisePulses',

              'XAMSClassification.XAMSClassification',
              ]


encoder_plugin = 'ROOTClass.EncodeROOTClass'
output = 'ROOTClass.WriteROOTClass'


[DEFAULT]
pmt_0_is_fake = False
tpc_name = "XAMS"
tpc_radius = 45 * mm

run_number = 0

channels_top = [0]
channels_bottom = [3]
channels_in_detector = {
    'tpc':   [0, 3],
    'other': [4, 5, 6, 7]
    }
n_channels = 8

gains = [2e6, 0, 0, 2e6, 0, 0, 0, 0]
; gains = [4e6, 0, 0, 4e6, 0, 0, 0, 0]

; CAEN V1724 used by XENON100 and XENON1T
sample_duration = int(2 * ns)      # int is necessary for data structure
digitizer_voltage_range = 2. * V
digitizer_bits = 14
pmt_circuit_load_resistor = 50 * Ohm
external_amplification = 1

digitizer_reference_baseline = 8235   # just observed from waveform without anything connected to it

pmts = [{'array': 'top', 'pmt_position': 0, 'position': {'x': 0, 'y': 0}},
        {'array': 'other', 'pmt_position': 1, 'position': {'x': 0, 'y': 0}},
        {'array': 'other', 'pmt_position': 2, 'position': {'x': 0, 'y': 0}},
        {'array': 'bottom', 'pmt_position': 3, 'position': {'x': 0, 'y': 0}},
        {'array': 'other', 'pmt_position': 4, 'position': {'x': 0, 'y': 0}},
        {'array': 'other', 'pmt_position': 5, 'position': {'x': 0, 'y': 0}},
        {'array': 'other', 'pmt_position': 6, 'position': {'x': 0, 'y': 0}},
        {'array': 'other', 'pmt_position': 7, 'position': {'x': 0, 'y': 0}}]


[MongoXAMS]
database = "xamsdata" 
collection = "DEFAULT"
address = "127.0.0.1:27017"
mongo_time_unit = 2 * ns

only_from_channels = [0, 3, 4, 5, 6, 7]



[HitFinder]
# For detailed description of what these settings do, see the documentation / plugin docstring.

# Compute baseline on first n samples in pulse:
initial_baseline_samples = 40

# Max hits to look for in each pulse: rest will be ignored
max_hits_per_pulse = 500

# Diagnostic plots settings
make_diagnostic_plots = 'never'     # Can be always, never, tricky cases, no hits, hits only, saturated, baseline shifts
make_diagnostic_plots_in = 'hitfinder_diagnostic_plots'
# Add extra information to diagnostic plots - this gives info on sum of hits in one pulse
diagnostic_plot_info = 'yes' # can be yes or no

# Threshold 1: Height / noise.
height_over_noise_high_threshold = 0       # Reasonable and conservative for run10: see xenon:xenon100:analysis:led_pax
height_over_noise_low_threshold = 0

# Threshold 2: Absolute ADC counts above baseline
absolute_adc_counts_high_threshold = 5   # ADC counts
absolute_adc_counts_low_threshold = 3   # ADC counts


# Threshold 3:  - Height / minimum
height_over_min_high_threshold = 0
height_over_min_low_threshold = 0

# Raise low threshold temporarily to fraction of hit height for rest of pulse
dynamic_low_threshold_coeff = 0



[SumWaveform.SumWaveform]
# If true, the 'tpc_raw', 'veto_raw' sum waveforms will be constructed WITHOUT subtracting the baseline correction
# Useful to see effect of baseline correction
# Note the raw sum waveform is for cosmetic (plotting) purposes only,
# it isn't (and shouldn't) be used for anything else
subtract_reference_baseline_only_for_raw_waveform = False


[BuildPeaks.GapSizeClustering]
# Start a new cluster / peak if a gap larger than this is encountered
# see [note tbd]
max_gap_size_in_cluster = 250 * ns



[BasicProperties.SumWaveformProperties]
# Length of the peak sum waveform field.
# Must be an even multiple of sample size, pax will add 1 sample width so there is a clear center.
peak_waveform_length = 2.5 * us



[BSON]
# By default, BSON-type formats are used for raw data
fields_to_ignore = ['all_hits',
                    'sum_waveforms',
                    'channel_waveforms',]
compresslevel = 4


[Zip]
events_per_file = 1000




[ROOTClass]
tree_name = 'tree'

# Fields to leave out of the output.
# Be very careful when adding fields to this: that means the cpp class will lose a field!
# Instead you should let a plugin clean out the unwanted fields for you
# For example, DeleteLowLevelInfo
fields_to_ignore = ['sum_waveforms',
                    'channel_waveforms',   # Doesn't exist, is sneakily added in XerawdpImitation mode
                    'raw_data']

# A list of extra fields to add to the ROOT classes
# Dictionary with key = class name (e.g. Event or Peak)
# Value = list of 3-tuples: (name, type, code)
# Code will be evaluated, with
#   python_object: instance of the pax object (e.g. Event or Peak)
#   root_object: instance of the root object (e.g. Event or Peak)
#   field: root_object.your_field_name
#   self: the WriteRootClass plugin
extra_fields = {'Event': [('s1s', 'std::vector <Int_t>',  "field.clear()\n[field.push_back(self._get_index(s1)) for s1 in python_object.s1s()]"),
                          ('s2s', 'std::vector <Int_t>',  "field.clear()\n[field.push_back(self._get_index(s2)) for s2 in python_object.s2s()]")],
               }

# Exclude compilation of the classes from the plugin timing report
# (not the tqdm progress bar)
exclude_compilation_from_timer = True

# Mapping of python/numpy types to C++/ROOT types
type_mapping = {'float':   'Float_t',
                'float64': 'Double_t',
                'float32': 'Float_t',
                'int':     'Int_t',
                'int16':   'Short_t',
                'int32':   'Int_t',
                'int64':   'Long64_t',
                'bool':    'Bool_t',
                'bool_':   'Bool_t',
                'long':    'Long64_t',
                'str':     'TString'}

# Force the types of certain fields to be different from the default type mappings
force_types = {'start_time': 'Long64_t',
               'stop_time': 'Long64_t'}

# Name and type of structured array fields. This should really be in datastructure... but wouldn't know where
structured_array_fields = {'hits': 'Hit',
                           'all_hits': 'Hit',
                           'trigger_signals': 'TriggerSignal'}

##
# Plotting settings
##
[Plotting]
waveforms_to_plot = (
        {'internal_name': 'tpc',      'plot_label': 'TPC (hits only)',
                    'drawstyle': 'steps', 'color':'black'},
        {'internal_name': 'tpc_raw',  'plot_label': 'TPC (raw)',
         'drawstyle': 'steps', 'color':'black', 'alpha': 0.3},
    )
output_name = 'plots'  # Output directory for plots. If SCREEN, will show plot in interactive GUI display.
plot_format = 'png'    # Can be pdf or png. No effect if output_dir is set.
plot_every = 1         # Skip plot_every-1 waveforms after plotting one
size_multiplier = 4    # Increase/decrease to get bigger/smaller plots

log_scale_entire_event = False
log_scale_s2 = False
log_scale_s1 = False

[Plotting.PlotEventSummary]
plot_largest_peaks = True      # On the top row, show zoom-ins of the largest S1, S2, and their hitpatterns

[Plotting.PlotChannelWaveforms3D]
log_scale = False

[Plotting.PeakViewer]
# Which peak should we show first? Can be 'largest', 'first', 'main_s1', 'main_s2'
# If the selection is impossible (e.g. you asked for main_s1 but there are no s1s in the event)
# the largest peak will be shown first.
starting_peak = 'largest'

# Select specific peaks to plot per event like this:
# starting_peak_per_event = {'event_number': left boundary of peak, ...}


